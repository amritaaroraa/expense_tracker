// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

import './App.css';
;

var messageOpt = localStorage.getItem("listOfTransaction");

var transactionList = messageOpt !== null ? JSON.parse(messageOpt) : [];

var initialState = {
  transactionList: transactionList,
  typeOfTransaction: "",
  amtOfTransaction: ""
};

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            transactionList: state.transactionList.concat([{
                    typeOfTransaction: state.typeOfTransaction,
                    amtOfTransaction: state.amtOfTransaction
                  }]),
            typeOfTransaction: "",
            amtOfTransaction: ""
          };
  } else if (action.TAG === /* TypeOfTransactionInputChanged */0) {
    return {
            transactionList: state.transactionList,
            typeOfTransaction: action._0,
            amtOfTransaction: state.amtOfTransaction
          };
  } else {
    return {
            transactionList: state.transactionList,
            typeOfTransaction: state.typeOfTransaction,
            amtOfTransaction: action._0
          };
  }
}

function App(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = React.useState(function () {
        return 0;
      });
  var setIncome = match$1[1];
  var income = match$1[0];
  var match$2 = React.useState(function () {
        return 0;
      });
  var setExpense = match$2[1];
  var expense = match$2[0];
  var handleTypeOfTransaction = function (e) {
    var newValue = e.target.value;
    Curry._1(dispatch, {
          TAG: /* TypeOfTransactionInputChanged */0,
          _0: newValue
        });
  };
  var handleAmtOfTransaction = function (e) {
    var str = e.target.value;
    Curry._1(dispatch, {
          TAG: /* AmtOfTransactionInputChanged */1,
          _0: str.replace(/^[ A-Za-z_@./#&*]*$/, "")
        });
  };
  var handleTransactionSubmit = function (e) {
    Curry._1(dispatch, /* AddTransaction */0);
    if (Js_string.slice(0, 1, state.amtOfTransaction) === "-") {
      return Curry._1(setExpense, (function (_prev) {
                    var v = Belt_Int.fromString(Js_string.sliceToEnd(1, state.amtOfTransaction));
                    return _prev + (
                            v !== undefined ? v : -1
                          ) | 0;
                  }));
    } else {
      return Curry._1(setIncome, (function (_prev) {
                    var v = Belt_Int.fromString(state.amtOfTransaction);
                    return _prev + (
                            v !== undefined ? v : -1
                          ) | 0;
                  }));
    }
  };
  var list = Belt_Array.map(state.transactionList, (function (transaction) {
          return React.createElement("ul", {
                      key: transaction.typeOfTransaction,
                      className: "list-of-transaction"
                    }, React.createElement("li", undefined, transaction.typeOfTransaction, React.createElement("span", undefined, "$" + transaction.amtOfTransaction)));
        }));
  React.useEffect((function () {
          localStorage.setItem("listOfTransaction", Belt_Option.getWithDefault(JSON.stringify(state.transactionList), "[]"));
        }), [state.transactionList]);
  return React.createElement("div", {
              className: "App"
            }, React.createElement("h1", undefined, "Expense Tracker"), React.createElement("div", {
                  className: "expense-tracker-form-container"
                }, React.createElement("h4", undefined, "Your Balance: "), React.createElement("h1", {
                      id: "balance"
                    }, "$" + String(income - expense | 0)), React.createElement("div", {
                      className: "income-expense-display"
                    }, React.createElement("div", undefined, React.createElement("h4", undefined, "Income: "), React.createElement("p", {
                              className: "income-money"
                            }, "$" + String(income))), React.createElement("div", undefined, React.createElement("h4", undefined, "Expense: "), React.createElement("p", {
                              className: "expense-money"
                            }, "$" + String(expense)))), React.createElement("h3", undefined, "History"), React.createElement("div", undefined, list), React.createElement("h3", undefined, "Add New Transaction"), React.createElement("div", undefined, React.createElement("div", {
                          className: "transaction-form"
                        }, React.createElement("label", undefined, "Text"), React.createElement("input", {
                              name: "typeOfTransaction",
                              type: "text",
                              value: state.typeOfTransaction,
                              onChange: handleTypeOfTransaction
                            })), React.createElement("div", {
                          className: "transaction-form"
                        }, React.createElement("label", undefined, "Amount (negative - expense, positive - income)"), React.createElement("input", {
                              name: "amtOfTransaction",
                              type: "text",
                              value: state.amtOfTransaction,
                              onChange: handleAmtOfTransaction
                            }))), React.createElement("div", {
                      className: "add-transaction-btn"
                    }, React.createElement("button", {
                          onClick: handleTransactionSubmit
                        }, "Add Transaction"))));
}

var messageOpt$1 = messageOpt === null ? undefined : Caml_option.some(messageOpt);

var make = App;

export {
  messageOpt$1 as messageOpt,
  transactionList ,
  initialState ,
  reducer ,
  make ,
}
/*  Not a pure module */
